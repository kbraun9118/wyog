package cmd

import (
	"fmt"
	"os"

	"github.com/kbraun9118/wyog/gitobject"
	"github.com/kbraun9118/wyog/ref"
	"github.com/kbraun9118/wyog/repository"
	"github.com/kbraun9118/wyog/repository/util"
	"github.com/spf13/cobra"
)

func init() {
	tagCmd.Flags().BoolVarP(&annotate, "annotate", "a", false, "Make an annotated tag")
}

var (
	annotate bool
	tagCmd   = &cobra.Command{
		Use:   "tag [name [object]]",
		Short: "List and create tags",
		Args:  cobra.MaximumNArgs(2),
		RunE: func(cmd *cobra.Command, args []string) error {
			path, err := repository.FindRequire(".")
			if err != nil {
				return err
			}
			repo, err := repository.New(path)
			if err != nil {
				return err
			}

			if len(args) > 0 {
				obj := "HEAD"
				if len(args) == 2 {
					obj = args[1]
				}

				tagCreate(&repo, args[0], obj, annotate)
			} else {
				refs, err := ref.List(&repo, nil)
				if err != nil {
					return err
				}

				tagRefs, ok := refs["tags"].(map[string]any)
				if !ok {
					return fmt.Errorf("tags ref is incorrect")
				}
				err = showRef(&repo, tagRefs, false, "")
				if err != nil {
					return err
				}
			}

			return nil
		},
	}
)

func tagCreate(repo *repository.Repository, name string, ref string, annotate bool) error {
	sha := gitobject.Find(repo, ref, "commit")

	if annotate {
		kvlm := util.NewLinkedMap[string, []string]()
		kvlm.Set("object", []string{sha})
		kvlm.Set("type", []string{"commit"})
		kvlm.Set("tag", []string{name})
		kvlm.Set("tagger", []string{"kbraun <kbraun@kbraun.dev>"})
		tag := gitobject.Tag{
			Commit: &gitobject.Commit{
				Kvlm: gitobject.KvlmData{
					Headers: *kvlm,
					Message: []byte("A tag generated by wyag, which won't let you customize the message!\n"),
				},
			},
		}
		var err error
		sha, err = gitobject.Write(&tag, repo)
		if err != nil {
			return err
		}
	}
	err := refCreate(repo, "tags/"+name, sha)
	if err != nil {
		return err
	}
	return nil
}

func refCreate(repo *repository.Repository, refName, sha string) error {
	fileName, err := repo.File("refs", refName)
	if err != nil {
		return err
	}
	err = os.WriteFile(*fileName, []byte(sha+"\n"), 0644)
	if err != nil {
		return fmt.Errorf("could not save file")
	}
	return nil
}
